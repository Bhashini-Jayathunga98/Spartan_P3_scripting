-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parallel_to_AXI is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    wdata : IN STD_LOGIC_VECTOR (7 downto 0);
    wadd : IN STD_LOGIC_VECTOR (7 downto 0);
    rdata : OUT STD_LOGIC_VECTOR (7 downto 0);
    radd : IN STD_LOGIC_VECTOR (7 downto 0);
    cmd : IN STD_LOGIC_VECTOR (7 downto 0);
    sta : OUT STD_LOGIC_VECTOR (7 downto 0);
    AXI : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of parallel_to_AXI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "parallel_to_AXI_parallel_to_AXI,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s25-csga324-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=15,HLS_SYN_TPT=16,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=682,HLS_SYN_LUT=1110,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal clear_flag : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cmd_read_reg_383 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal cmd_read_read_fu_94_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal wdata_read_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_2_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln34_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln216_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln216_reg_421 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal sext_ln324_1_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln215_1_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln215_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln324_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal zext_ln211_1_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln211_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state16 : BOOLEAN;
    signal trunc_ln216_1_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln324_1_fu_198_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln324_1_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln324_1_fu_210_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln324_1_fu_216_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln215_1_fu_236_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_1_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln215_1_fu_248_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln215_1_fu_254_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln1_fu_274_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln215_fu_286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_292_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal shl_ln_fu_312_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln324_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln324_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_330_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln874_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_324 : BOOLEAN;
    signal ap_condition_346 : BOOLEAN;

    component parallel_to_AXI_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gmem_m_axi_U : component parallel_to_AXI_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((cmd_read_read_fu_94_p2 = ap_const_lv8_1)) and not((cmd_read_read_fu_94_p2 = ap_const_lv8_2)) and not((cmd_read_read_fu_94_p2 = ap_const_lv8_3)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                and_ln34_reg_417 <= and_ln34_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_start = ap_const_logic_1) and (cmd_read_read_fu_94_p2 = ap_const_lv8_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (cmd_read_read_fu_94_p2 = ap_const_lv8_2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (cmd_read_read_fu_94_p2 = ap_const_lv8_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                clear_flag <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cmd_read_reg_383 <= cmd;
                wdata_read_reg_387 <= wdata;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (cmd_read_read_fu_94_p2 = ap_const_lv8_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_1_reg_405 <= sext_ln215_fu_302_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (cmd_read_read_fu_94_p2 = ap_const_lv8_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_2_reg_393 <= sext_ln324_1_fu_226_p1(32 - 1 downto 0);
                gmem_addr_3_reg_399 <= sext_ln215_1_fu_264_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (cmd_read_read_fu_94_p2 = ap_const_lv8_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_reg_411 <= sext_ln324_fu_340_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state9_io) or ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (cmd_read_reg_383 = ap_const_lv8_2))) then
                trunc_ln216_reg_421 <= trunc_ln216_fu_374_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, cmd_read_reg_383, ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state16, gmem_RVALID, gmem_BVALID, ap_block_state9_io, ap_block_state2_io, ap_block_state3_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not((((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_boolean_1 = ap_block_state9_io) or ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2)))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if ((not(((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln215_1_fu_248_p2 <= std_logic_vector(unsigned(AXI) + unsigned(zext_ln215_1_fu_244_p1));
    add_ln215_fu_286_p2 <= std_logic_vector(unsigned(AXI) + unsigned(zext_ln215_fu_282_p1));
    add_ln324_1_fu_210_p2 <= std_logic_vector(unsigned(AXI) + unsigned(zext_ln324_1_fu_206_p1));
    add_ln324_fu_324_p2 <= std_logic_vector(unsigned(zext_ln324_fu_320_p1) + unsigned(AXI));
    and_ln34_fu_360_p2 <= (icmp_ln874_fu_354_p2 and clear_flag);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_assign_proc : process(cmd_read_reg_383, gmem_RVALID)
    begin
                ap_block_state16 <= ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3));
    end process;


    ap_block_state2_io_assign_proc : process(cmd_read_reg_383, gmem_AWREADY, gmem_ARREADY)
    begin
                ap_block_state2_io <= (((gmem_AWREADY = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((gmem_AWREADY = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_1)) or ((gmem_ARREADY = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2)));
    end process;


    ap_block_state3_io_assign_proc : process(cmd_read_reg_383, gmem_WREADY)
    begin
                ap_block_state3_io <= (((gmem_WREADY = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((gmem_WREADY = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_1)));
    end process;


    ap_block_state8_assign_proc : process(cmd_read_reg_383, gmem_BVALID)
    begin
                ap_block_state8 <= (((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_1)));
    end process;


    ap_block_state9_assign_proc : process(cmd_read_reg_383, gmem_RVALID)
    begin
                ap_block_state9 <= ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2));
    end process;


    ap_block_state9_io_assign_proc : process(cmd_read_reg_383, gmem_ARREADY)
    begin
                ap_block_state9_io <= ((gmem_ARREADY = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3));
    end process;


    ap_condition_324_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state16, gmem_RVALID)
    begin
                ap_condition_324 <= (not(((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3))) and (ap_const_logic_1 = ap_CS_fsm_state16));
    end process;


    ap_condition_346_assign_proc : process(cmd_read_reg_383, and_ln34_reg_417)
    begin
                ap_condition_346 <= (not((cmd_read_reg_383 = ap_const_lv8_3)) and not((cmd_read_reg_383 = ap_const_lv8_2)) and not((cmd_read_reg_383 = ap_const_lv8_1)) and (ap_const_lv1_1 = and_ln34_reg_417));
    end process;


    ap_done_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state16, gmem_RVALID)
    begin
        if ((not(((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state16, gmem_RVALID)
    begin
        if ((not(((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmd_read_read_fu_94_p2 <= cmd;

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, cmd_read_reg_383, ap_CS_fsm_state9, gmem_RVALID, gmem_addr_3_reg_399, gmem_addr_1_reg_405, ap_block_state9_io, ap_block_state2_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state9_io) or ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (cmd_read_reg_383 = ap_const_lv8_3))) then 
            gmem_ARADDR <= gmem_addr_3_reg_399;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_2))) then 
            gmem_ARADDR <= gmem_addr_1_reg_405;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, cmd_read_reg_383, ap_CS_fsm_state9, gmem_RVALID, ap_block_state9_io, ap_block_state2_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_2)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (cmd_read_reg_383 = ap_const_lv8_3)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state2, cmd_read_reg_383, gmem_addr_2_reg_393, gmem_addr_reg_411, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
            if ((cmd_read_reg_383 = ap_const_lv8_1)) then 
                gmem_AWADDR <= gmem_addr_reg_411;
            elsif ((cmd_read_reg_383 = ap_const_lv8_3)) then 
                gmem_AWADDR <= gmem_addr_2_reg_393;
            else 
                gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state2, cmd_read_reg_383, ap_block_state2_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_1)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state8, gmem_BVALID)
    begin
        if (((not((((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (cmd_read_reg_383 = ap_const_lv8_3)) or (not((((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((gmem_BVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_1)))) and (ap_const_logic_1 = ap_CS_fsm_state8) and (cmd_read_reg_383 = ap_const_lv8_1)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state9, ap_CS_fsm_state16, gmem_RVALID, ap_block_state9_io)
    begin
        if (((not(((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_3))) and (ap_const_logic_1 = ap_CS_fsm_state16) and (cmd_read_reg_383 = ap_const_lv8_3)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or ((gmem_RVALID = ap_const_logic_0) and (cmd_read_reg_383 = ap_const_lv8_2)))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (cmd_read_reg_383 = ap_const_lv8_2)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state3, zext_ln211_1_fu_366_p1, zext_ln211_fu_370_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((cmd_read_reg_383 = ap_const_lv8_1)) then 
                gmem_WDATA <= zext_ln211_fu_370_p1;
            elsif ((cmd_read_reg_383 = ap_const_lv8_3)) then 
                gmem_WDATA <= zext_ln211_1_fu_366_p1;
            else 
                gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(cmd_read_reg_383, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3) and (cmd_read_reg_383 = ap_const_lv8_1)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, cmd_read_reg_383, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state2, cmd_read_reg_383)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (cmd_read_reg_383 = ap_const_lv8_1)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, cmd_read_reg_383, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (cmd_read_reg_383 = ap_const_lv8_1)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, cmd_read_reg_383, ap_CS_fsm_state9, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (cmd_read_reg_383 = ap_const_lv8_2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, cmd_read_reg_383, ap_CS_fsm_state3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (cmd_read_reg_383 = ap_const_lv8_3)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (cmd_read_reg_383 = ap_const_lv8_1)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln874_fu_354_p2 <= "1" when (cmd = ap_const_lv8_0) else "0";

    rdata_assign_proc : process(cmd_read_reg_383, trunc_ln216_reg_421, trunc_ln216_1_fu_378_p1, ap_condition_324)
    begin
        if ((ap_const_boolean_1 = ap_condition_324)) then
            if ((cmd_read_reg_383 = ap_const_lv8_2)) then 
                rdata <= trunc_ln216_reg_421;
            elsif ((cmd_read_reg_383 = ap_const_lv8_3)) then 
                rdata <= trunc_ln216_1_fu_378_p1;
            else 
                rdata <= "XXXXXXXX";
            end if;
        else 
            rdata <= "XXXXXXXX";
        end if; 
    end process;

        sext_ln215_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln215_1_fu_254_p4),64));

        sext_ln215_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_292_p4),64));

        sext_ln324_1_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln324_1_fu_216_p4),64));

        sext_ln324_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_330_p4),64));

    shl_ln1_fu_274_p3 <= (radd & ap_const_lv2_0);
    shl_ln215_1_fu_236_p3 <= (radd & ap_const_lv2_0);
    shl_ln324_1_fu_198_p3 <= (wadd & ap_const_lv2_0);
    shl_ln_fu_312_p3 <= (wadd & ap_const_lv2_0);

    sta_assign_proc : process(cmd_read_reg_383, ap_condition_324, ap_condition_346)
    begin
        if ((ap_const_boolean_1 = ap_condition_324)) then
            if ((ap_const_boolean_1 = ap_condition_346)) then 
                sta <= ap_const_lv8_0;
            elsif ((cmd_read_reg_383 = ap_const_lv8_1)) then 
                sta <= ap_const_lv8_1;
            elsif ((cmd_read_reg_383 = ap_const_lv8_2)) then 
                sta <= ap_const_lv8_2;
            elsif ((cmd_read_reg_383 = ap_const_lv8_3)) then 
                sta <= ap_const_lv8_3;
            else 
                sta <= "XXXXXXXX";
            end if;
        else 
            sta <= "XXXXXXXX";
        end if; 
    end process;

    trunc_ln1_fu_292_p4 <= add_ln215_fu_286_p2(63 downto 2);
    trunc_ln215_1_fu_254_p4 <= add_ln215_1_fu_248_p2(63 downto 2);
    trunc_ln216_1_fu_378_p1 <= gmem_RDATA(8 - 1 downto 0);
    trunc_ln216_fu_374_p1 <= gmem_RDATA(8 - 1 downto 0);
    trunc_ln324_1_fu_216_p4 <= add_ln324_1_fu_210_p2(63 downto 2);
    trunc_ln_fu_330_p4 <= add_ln324_fu_324_p2(63 downto 2);
    zext_ln211_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wdata_read_reg_387),32));
    zext_ln211_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wdata_read_reg_387),32));
    zext_ln215_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln215_1_fu_236_p3),64));
    zext_ln215_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_274_p3),64));
    zext_ln324_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln324_1_fu_198_p3),64));
    zext_ln324_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_312_p3),64));
end behav;
